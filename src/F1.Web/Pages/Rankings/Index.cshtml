@page
@model F1.Web.Pages.Rankings.IndexModel
@{
  // Rankings placeholder page. Shows a prominent 'not seen' banner per
  // project requirements. Replace this content when real ranking data is available.
  Layout = "~/Pages/Shared/_Layout.cshtml";
}

<div class="max-w-4xl mx-auto px-4 py-20">
  <div class="bg-yellow-900/10 border-l-4 border-yellow-500 p-6 rounded text-center">
    <h1 class="text-2xl font-bold">Rankings are not seen</h1>
    <p class="mt-2 text-gray-300">Rankings are not visible yet â€” data unavailable / coming soon.</p>
  </div>

  <div class="mt-8 text-sm text-gray-400">
    <!-- TODO: When rankings are available, expect a JSON structure like:
         {
           "DriverStandings": [{ "Position":1, "Name":"Driver", "Team":"Team", "Points":0, "Wins":0, "Podiums":0 }],
           "TeamStandings": [{ "Position":1, "Name":"Team", "Points":0, "Wins":0, "Podiums":0 }]
         }
    -->
  </div>
</div>

@section Scripts {
  <script>
    // tiny client-side sort for columns with class 'sortable'
    document.addEventListener('click', function(e){
      const el = e.target;
      if(el.classList && el.classList.contains('sortable')){
        const th = el; const table = th.closest('table');
        const colIndex = Array.from(th.parentElement.children).indexOf(th);
        const tbody = table.querySelector('tbody');
        const rows = Array.from(tbody.querySelectorAll('tr'));
        rows.sort((a,b)=> +b.children[colIndex].innerText - +a.children[colIndex].innerText);
        rows.forEach(r=>tbody.appendChild(r));
      }
    });
  </script>
}
